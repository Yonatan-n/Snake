{"version":3,"sources":["gameSnake.js"],"names":["canvas","document","getElementById","ctx","getContext","colorList","snake","grid","width","dir","speed","border","length","tail","x","y","color","food","hd","move","change","spd","console","error","Error","shift","push","window","onload","initCanvas","initArrowControls","funkTitle","i","genRandFood","changeSnakeColor","isPhone","flag","querySelector","computedStyle","getComputedStyle","getPropertyValue","Number","toString","slice","myEvent","ctrl","arrows","children","falseMove","addEventListener","target","id","dirKeys","key","undefined","log","switchThisColor","me","xs","style","randChoice","setInterval","srcElement","clearRect","height","fillStyle","fillRect","stroke","draw","randRange","l","h","Math","floor","random","xy","drawAllWithBorder","beginPath","arc","PI","fill","closePath","unshift","innerText","forEach","block","eqJson","deathSequence","br","wd","a","b","JSON","stringify","alert"],"mappings":"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","file":"gameSnake.map","sourceRoot":"..","sourcesContent":["var canvas = document.getElementById('snakeCanvas')\nvar ctx = canvas.getContext('2d')\nconst colorList = [\n  'whitesmoke',\n  'green',\n  'blue',\n  'burlywood',\n  'violet',\n  'pink',\n  'crimson',\n  'cadetblue',\n  'rosybrown',\n  'royalblue',\n  'red',\n  'rebeccapurple',\n  'yellowgreen',\n  'yellow',\n  'palevioletred',\n  'palegreen',\n  'salmon',\n  'aqua'\n]\nvar snake = {\n  grid: [],\n  width: 20,\n  dir: 'right',\n  speed: 20,\n  border: 2,\n  length: 5,\n  tail: [\n    { x: 0, y: 200 },\n    { x: 20, y: 200 },\n    { x: 40, y: 200 },\n    { x: 60, y: 200 },\n    { x: 80, y: 200 }\n  ],\n  color: 'green',\n  food: { x: 580, y: 580 },\n  hd: function () {\n    return this.tail[this.length - 1]\n  },\n  move: function () {\n    let change\n    const spd = this.speed\n    switch (this.dir) {\n      case 'right':\n        change = [spd, 0]\n        break\n      case 'left':\n        change = [-spd, 0]\n        break\n      case 'up':\n        change = [0, -spd]\n        break\n      case 'down':\n        change = [0, spd]\n        break\n      default:\n        console.error('error with snake dir', new Error())\n        break\n    }\n    const hd = snake.tail[snake.length - 1]\n    snake.tail.shift()\n    snake.tail.push({\n      x: hd.x + change[0],\n      y: hd.y + change[1]\n    })\n  }\n}\nwindow.onload = function () {\n  initCanvas()\n  initArrowControls()\n  funkTitle()\n  for (let i = 0; i <= 580; i += 20) {\n    snake.grid.push(i)\n  }\n  genRandFood()\n  changeSnakeColor()\n}\n\nfunction isPhone () {\n  const flag = document.querySelector('#isPhone')\n  const computedStyle = window.getComputedStyle(flag, null)\n  const color = computedStyle.getPropertyValue('color')\n  return Number(color.toString().slice(4, 7)) === 255\n}\n\nfunction initArrowControls () {\n  let myEvent = isPhone() ? 'touchstart' : 'click'\n  const ctrl = document.querySelector('#controls')\n  let arrows = ctrl.children\n  const falseMove = {\n    'up': 'down',\n    'down': 'up',\n    'left': 'right',\n    'right': 'left'\n  }\n  for (let i = 0; i < arrows.length; i++) {\n    arrows[i].addEventListener(myEvent, function (x) {\n      if (falseMove[x.target.id] !== snake.dir) {\n        snake.dir = x.target.id\n      }\n    })\n  } // need to add falseMove to this function too, cause you can make a u turn with out the u\n  document.addEventListener('keydown', function (x) {\n    const dirKeys = {\n      'w': 'up',\n      'a': 'left',\n      's': 'down',\n      'd': 'right'\n    }\n    if (dirKeys[x.key] !== undefined && falseMove[dirKeys[x.key]] !== snake.dir) {\n      snake.dir = dirKeys[x.key]\n    } else {\n      console.log('na')\n    }\n  })\n  return 0\n}\n\nfunction switchThisColor (me, xs = colorList) {\n  me.style.color = randChoice(xs)\n  return 0\n}\nfunction funkTitle () {\n  document.querySelector('#h-one').addEventListener('click', function (x) {\n    window.setInterval(function () { switchThisColor(x.srcElement) }, 1000 / 3)\n    return 0\n  })\n  // switchThisColor(, undefined)\n  return 0\n}\n\nfunction initCanvas () {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  // console.log(canvas.clientWidth)\n  ctx.fillStyle = 'black'\n  // ctx.rotate(Math.PI / 180 * 10)\n  ctx.fillRect(500, 500, 100, 100)\n  ctx.stroke()\n  // console.log(new Date())\n  // window.requestAnimationFrame(draw)\n  window.setInterval(draw, 1000 / 10) // Main Loop!\n}\n\nfunction randRange (l, h) {\n  return Math.floor(Math.random() * (h - l))\n}\nfunction randChoice (xs) {\n  return xs[randRange(0, xs.length)]\n}\n\nfunction draw () {\n  ctx.fillStyle = 'black'\n  ctx.clearRect(0, 0, canvas.width, canvas.height) // clear prev paint\n  for (let i = 0; i < snake.length; i++) { // paint all the new (and old) snake points\n    const xy = snake.tail[i]\n    drawAllWithBorder([xy.x, xy.y])\n  }\n  snake.move() // move to the next block\n  ctx.beginPath()\n  ctx.fillStyle = 'red'\n  ctx.arc(snake.food.x + 10, snake.food.y + 10, snake.width / 2, 0, Math.PI * 2)\n  ctx.fill()\n  ctx.closePath() // draw the food\n  if (snake.food.x === snake.hd().x && snake.food.y === snake.hd().y) {\n    snake.tail.unshift(snake.tail[0])\n    snake.length += 1\n    genRandFood()\n    changeSnakeColor()\n    document.querySelector('#score').innerText = snake.length - 5\n  } // check if food is eaten, inc snake if does and draw new food\n  snake.tail.slice(0, snake.length - 1).forEach(block => {\n    if (eqJson(block, snake.hd())) {\n      deathSequence()\n    }\n  })\n}\n\nfunction drawAllWithBorder (xy) {\n  const br = snake.border\n  const wd = snake.width\n  ctx.fillStyle = 'black'\n  ctx.fillRect(xy[0], xy[1], wd, wd)\n  ctx.fillStyle = snake.color\n  ctx.fillRect(xy[0] + (br / 2), xy[1] + (br / 2), wd - br, wd - br)\n}\n\nfunction genRandFood () {\n  snake.food = {\n    x: randChoice(snake.grid),\n    y: randChoice(snake.grid)\n  }\n}\nfunction changeSnakeColor () {\n  snake.color = randChoice(colorList)\n  return 0\n}\nfunction eqJson (a, b) {\n  return JSON.stringify(a) === JSON.stringify(b)\n}\nfunction deathSequence () {\n  alert('dead! refresh 4 now')\n}\n"]}